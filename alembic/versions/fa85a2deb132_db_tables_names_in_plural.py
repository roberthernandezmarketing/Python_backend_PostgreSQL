"""DB Tables names in plural

Revision ID: fa85a2deb132
Revises: 900b52efc4b1
Create Date: 2025-05-16 11:50:17.183540

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fa85a2deb132'
down_revision: Union[str, None] = '900b52efc4b1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authors',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_authors_email'), 'authors', ['email'], unique=True)
    op.create_index(op.f('ix_authors_id'), 'authors', ['id'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.create_table('posts',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.Column('published', sa.Boolean(), nullable=True),
    sa.Column('author_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)
    op.create_index(op.f('ix_posts_title'), 'posts', ['title'], unique=False)
    op.create_table('post_tags',
    sa.Column('post_id', sa.BigInteger(), nullable=True),
    sa.Column('tag_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], )
    )
    op.drop_table('post_tag')

    op.drop_index('ix_post_id', table_name='post')
    op.drop_index('ix_post_title', table_name='post')
    op.drop_table('post')

    op.drop_index('ix_tag_id', table_name='tag')
    op.drop_index('ix_tag_name', table_name='tag')
    op.drop_table('tag')

    op.drop_index('ix_author_email', table_name='author')
    op.drop_index('ix_author_id', table_name='author')
    op.drop_table('author')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('tag_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tag_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tag_name', 'tag', ['name'], unique=True)
    op.create_index('ix_tag_id', 'tag', ['id'], unique=False)
    op.create_table('post',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('post_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('published', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['author.id'], name='post_author_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='post_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_post_title', 'post', ['title'], unique=False)
    op.create_index('ix_post_id', 'post', ['id'], unique=False)
    op.create_table('author',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('author_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='author_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_author_id', 'author', ['id'], unique=False)
    op.create_index('ix_author_email', 'author', ['email'], unique=True)
    op.create_table('post_tag',
    sa.Column('post_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('tag_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['post.id'], name='post_tag_post_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='post_tag_tag_id_fkey')
    )
    op.drop_table('post_tags')

    op.drop_index(op.f('ix_posts_title'), table_name='posts')
    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.drop_table('posts')

    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')

    op.drop_index(op.f('ix_authors_id'), table_name='authors')
    op.drop_index(op.f('ix_authors_email'), table_name='authors')
    op.drop_table('authors')
    # ### end Alembic commands ###
